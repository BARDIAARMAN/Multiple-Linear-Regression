# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fx7nEYnYwoV051vtTNJkoJBZRg8TV6WI
"""

import numpy as np
import pandas as pd
from numpy import math

from sklearn.preprocessing import MinMaxScaler 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()
dataset = pd.read_csv("mpg.csv")
len(dataset)
dataset.head()


dataset.shape


dataset = dataset.rename(columns={'horsepower ': 'horsepower'})
plt.scatter(dataset.mpg , dataset.horsepower , alpha = 0.5)
plt.title("scatter plot of mpg with displacement")
plt.xlabel('horsepower')
plt.ylabel('mpg')
plt.show()

dataset = dataset.rename(columns={'displacement ': 'displacement'})
plt.scatter(dataset.mpg , dataset.displacement , alpha = 0.5)
plt.title("scatter plot of mpg with displacement")
plt.xlabel('displacement')
plt.ylabel('mpg')
plt.show()

plt.scatter(dataset.mpg , dataset.weight , alpha = 0.5)
plt.title("scatter plot of mpg with displacement")
plt.xlabel('weight')
plt.ylabel('mpg')
plt.show()

dependent_variable = 'mpg'
independent_variables = dataset.columns.tolist()
independent_variables.remove(dependent_variable)
independent_variables


# creating the data of independent variables
x = dataset[independent_variables].values
#creating the dependent variable data
y = dataset[dependent_variable].values


# splitting the dataset into the training set and test set 
x_train, x_test, y_train, y_test = train_test_split(x , y , test_size = 0.2 ,random_state = 0)
#transforming data
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)


 #fitting multiple linear regression to the training set
regressor = LinearRegression()
regressor.fit(x_train,y_train)


#predicting the test dataset
y_pred = regressor.predict(x_test)
math.sqrt(mean_squared_error(y_test,y_pred))

r2_score(y_test, y_pred)

